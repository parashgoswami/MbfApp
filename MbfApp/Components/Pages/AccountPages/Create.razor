@page "/accounts/create"

@using MbfApp.Dtos.AccountCodes

@inject NavigationManager NavigationManager
@inject IAccountService AccountService

<PageTitle>Create New Account</PageTitle>

<div class="row justify-content-center">
    <div class="col-md-6">
        <div class="card rounded-2 overflow-hidden p-4">
            <h5 class="mb-0">Create New Account</h5>
            <hr class="border-1 border-success opacity-50">

            @if (ErrorMessage is not null) 
            {
                <div class="alert alert-danger" role="alert">@ErrorMessage</div>
            }

            <EditForm method="post" Model="Request" OnValidSubmit="AddAccountCode" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <div class="mb-3">
                    <label for="name" class="form-label small">Account Name</label>
                    <InputText id="name" @bind-Value="Request.AccountName" class="form-control form-control-sm"
                        aria-required="true" />
                    <ValidationMessage For="() => Request.AccountName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label small">Account Type</label>
                    <InputSelect id="type" @bind-Value="Request.AccountType" class="form-select form-select-sm">
                        @foreach (var type in Enum.GetValues<AccountType>())
                        {
                            <option value="@type">@type</option>
                        }
                    </InputSelect>
                </div>
                <button type="submit" class="btn btn-success btn-sm mb-2">Create</button>
                <a href="/accounts" class="btn btn-secondary btn-sm mb-2">Back </a>
            </EditForm>
        </div>
    </div>
</div>


@code 
{
    [SupplyParameterFromForm]
    private AccountRequestDto Request { get; set; } = new();

    private string? ErrorMessage;

    private async Task AddAccountCode()
    {
        try 
        {
            await AccountService.CreateNewAccount(Request);
            NavigationManager.NavigateTo("/accounts");
        }
        catch (InvalidOperationException ex)
        {
            ErrorMessage = ex.Message;
            Console.WriteLine(ex.Message);
        }
    }
}
